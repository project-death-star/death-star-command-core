name: Go CI and Docker

on:
  push:
    branches: [ main, vibe-coding ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24'
  REGISTRY: ghcr.io

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: go.sum

    - name: Verify dependencies
      run: |
        go mod download
        go mod verify

    - name: Run go fmt
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "Go code is not formatted. Run 'go fmt ./...'"
          exit 1
        fi

    - name: Run go vet
      run: go vet ./...

    - name: Install golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: v1.64.2
        args: --timeout=5m

    - name: Build
      run: go build -v ./...

    - name: Test with coverage
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -html=coverage.out -o coverage.html

    # - name: Upload coverage reports
    #   uses: codecov/codecov-action@v4
    #   with:
    #     file: ./coverage.out
    #     flags: unittests
    #     name: codecov-umbrella
    #     token: ${{ secrets.CODECOV_TOKEN }}

    # - name: Upload test coverage
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: coverage-report
    #     path: coverage.html

  sast-scan:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Semgrep SAST scan
        uses: semgrep/semgrep-action@v1
        with:
          config: "p/default"

  sca-scan:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner in fs mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          ignore-unfixed: true
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

  build-and-push-docker-image:
    needs: [build-and-test, sast-scan, sca-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write
      attestations: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDD-HHmmss'}}

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            GO_VERSION=${{ env.GO_VERSION }}
          provenance: true
          sbom: true

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ github.repository }}@${{ steps.docker_build.outputs.digest }}'
          format: 'sarif'
          output: 'trivy-image.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image.sarif'

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: '${{ env.REGISTRY }}/${{ github.repository }}@${{ steps.docker_build.outputs.digest }}'
          format: 'spdx-json'
          output-file: 'sbom.spdx.json'
          upload-artifact: true
          upload-artifact-name: 'sbom-${{ github.sha }}'

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign the container image
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign --yes {}@${{ steps.docker_build.outputs.digest }}

      - name: Verify the container image signature
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign verify ${{ env.REGISTRY }}/${{ github.repository }}@${{ steps.docker_build.outputs.digest }} \
            --certificate-identity-regexp=https://github.com/${{ github.repository }}/.github/workflows/ \
            --certificate-oidc-issuer=https://token.actions.githubusercontent.com

      - name: Create attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ github.repository }}
          subject-digest: ${{ steps.docker_build.outputs.digest }}
          push-to-registry: true
